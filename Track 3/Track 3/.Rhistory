int sum = x + y + z;
return sum;
}')
cppFunction('in add(int x, int y, int z){
int sum = x + y + z;
return sum;
}')
install.packages(c("assertr", "base64enc", "BH", "broom", "bsts", "checkmate", "checkpoint", "chron", "codetools", "curl", "devtools", "dplyr", "DT", "evaluate", "formatR", "Formula", "gridExtra", "gtools", "highr", "Hmisc", "htmlwidgets", "httr", "installr", "knitr", "lattice", "lawstat", "lme4", "lpSolve", "manipulate", "markdown", "mgcv", "mnormt", "mvtnorm", "openxlsx", "pander", "plyr", "psych", "R6", "Rcpp", "RcppEigen", "RCurl", "rmarkdown", "roxygen2", "rstudioapi", "scales", "shiny", "stringi", "stringr", "VGAM"))
cppFunction('in add(int x, int y, int z){
int sum = x + y + z;
return sum;
}')
library(Rcpp)
cppFunction('in add(int x, int y, int z){
int sum = x + y + z;
return sum;
}')
library(Rcpp)
cppFunction('int add(int x, int y, int z){
int sum = x + y + z;
return sum;
}')
sum(1,2,3)
cppFunction('int add(int x, int y, int z){
int sum = x + y + z;
return sum;
}')
bob=function(){2+2}
bob()
bob=function(x){x*2+2}
bob(4)
bob=function(x){a=3;x*2+2}
bob(4)
bob=function(x){a=3;x*2+2;x}
bob(4)
bob=function(x){a=3;x*2+2;x;}
bob(4)
bob=function(x){a=3;x*2+2;x;3}
bob(4)
rnorm(100000)  %>% mean
library(magrittr)
rnorm(100000)  %>% mean
rnorm(100000000)  %>% mean
mean(rnorm(100000000))
bob1=function(){rnorm(100000000)  %>% mean}
bob2=function(){mean(rnorm(100000000))}
system.time(bob1())
system.time(bob2())
bob1=function(){rnorm(10000000000)  %>% mean}
bob2=function(){mean(rnorm(10000000000))}
system.time(bob1())
setClass("Person",slots=list(name="character",age="numeric"))
alice=new("Person",name="Alice")
alice
alice=new("Person",name=3)
rbinom(100,1)
rbinom(100,1,0.5)
bob=data.frame(a=rbinom(1000000,1,0.5),b=rnorm(1000000))
system.time(filter(bob,a==1))
names(bob)
library(dplyr)
system.time(filter(bob,a==1))
bob=data.frame(a=rbinom(5000000,1,0.5),b=rnorm(5000000))
system.time(filter(bob,a==1))
library(data.table)
dt_bob=data.table(bob)
system.time(dt[a==1,])
system.time(dt["a"==1,])
system.time(dt_bob[a==1,])
do.call(rnorm,list(q,mean=2,sd=3))
do.call(rnorm,list(1,mean=2,sd=3))
do.call(rnorm,list(10,mean=2,sd=3))
install.packages("EpiModel")
install.packages("ndtv")
help(package = "EpiModel")
help(fourier.series)
sample(10)
sample(10)<4
sample(10)<4  %>% which()
library(magrittr)
sample(10)<4  %>% which()
sample(10)<4
x=sample(10)<4
which(x==1)
x=sample(10)<4
which(x==1)
x=sample(10)<4
which(x==1)
ls()
rm(list=ls())
letters
numbers
search()
library(pryr)
search()
where("list")
where("where")
where("rnorm")
search()
where("read.csv")
where("plot")
where("ggplot")
search()
help(exists)
g=function(x){
if (!exists("a",inherits = FALSE)){
message("Defining a")
a=1}
else{
a=a+1}
a}
g(10)
g(10)
g(10)
a=4
g(10)
where("g")
message("Vivek rocks!")
bob=function(){message("Vivek rocks!");rnorm(10)}
bob()
search()
library(igraph)
search()
where("union")
rm(list=ls())
search()
rm(igraph)
detach("igraph")
detach(igraph)
search()
detach("package:igraph", unload=TRUE)
search()
where("union")
ls()
`:)`=3
ls()
:)
`:)`
x<<-3
x
x<-3
x
rm(list=ls())
x<<-3
`:)`=rnorm(10)
`:)`
:)
library(doParallel)
detectCores()
`3`=4
`3`
`3`=data.frame(4)
`3`
`3`$bob="bob"
`3`
rm(list=ls())
library(pryr)
where("for")
where("lapply")
where("rm")
search()
x=c(5,1,4)
lapply(x,rnorm)
lapply(x,rnorm)  %>% unlist
library(magrittr)
lapply(x,rnorm)  %>% unlist
x=2
function(){x^2}
function(){x}
bob=function(){x^2}
bob()
bob=function(x){x^2}
bob(3)
lapply(x,rnorm)  %>% unlist
x
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderPrint({
# With base graphics, need to tell it what the x and y variables are.
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg")
# nearPoints() also works with hover and dblclick events
})
}
shinyApp(ui, server)
library(shiny)
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderPrint({
# With base graphics, need to tell it what the x and y variables are.
nearPoints(mtcars, input$plot_click, xvar = "wt", yvar = "mpg")
# nearPoints() also works with hover and dblclick events
})
}
shinyApp(ui, server)
library(ggplot2)
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
})
output$info <- renderPrint({
# With ggplot2, no need to tell it what the x and y variables are.
# threshold: set max distance, in pixels
# maxpoints: maximum number of rows to return
# addDist: add column with distance, in pixels
nearPoints(mtcars, input$plot_click, threshold = 10, maxpoints = 1,
addDist = TRUE)
})
}
shinyApp(ui, server)
ui <- basicPage(
plotOutput("plot1", brush = "plot_brush"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(mtcars$wt, mtcars$mpg)
})
output$info <- renderPrint({
# With base graphics, need to tell it what the x and y variables are.
brushedPoints(mtcars, input$plot_brush, xvar = "wt", yvar = "mpg")
})
}
shinyApp(ui, server)
library(ggplot2)
ui <- basicPage(
plotOutput("plot1", brush = "plot_brush", height = 250),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
facet_grid(. ~ cyl) +
theme_bw()
})
output$info <- renderPrint({
brushedPoints(mtcars, input$plot_brush)
})
}
shinyApp(ui, server)
install.packages("describer")
library(describer)
describe(mtcars)
describe(iris)
search()
library(ggplot2)
search()
print 3
print 'bob'
print(3)
print('bob')
x;y=3
x_y=3
x.y=3
for=4
fo=4
while=4
whil=4
rm(list=ls())
x=3
type(x)
typeof(x)
x=3L
typeof(x)
x="A"
typeof(x)
typeof(1.0)
typeof(1)
typeof(a)
str(a)
str(x)
x
as.character(3)
as.integer(3)
as.integer(a)
as.integer("a")
as.integer(3.1)
paste(2,"A")
paste(2,"A",sep="")
as.integer("a")
readline()
input = readline('Enter anything: ')
input
print(3,input)
print(4,input)
paste(4,input)
#3
3
x=3
x
print(x)
print(dplyr::group_by)
print(dplyr::group_by_)
print(dplyr::group_by)
install.packages("rjsonio")
y
install.packages("RJSONIO")
install.packages("HTTR")
install.packages("httr")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
jupyter qtconsole --kernel=ir
install.packages("rpython")
library(devtools)
install.packages("animation")
library(animation)
oopt = ani.options(interval = 2)
for (i in 1:5) {
plot(runif(10), ylim = c(0, 1))
ani.pause()
}
ani.options(oopt)
demo('Xmas2', package = 'animation')
n = 20
x = sort(rnorm(n))
y = rnorm(n)
## set up an empty frame, then add points one by one
par(bg = "white") # ensure the background color is white
plot(x, y, type = "n")
ani.record(reset = TRUE) # clear history before recording
for (i in 1:n) {
points(x[i], y[i], pch = 19, cex = 2)
ani.record() # record the current frame
}
## now we can replay it, with an appropriate pause between frames
oopts = ani.options(interval = 0.5)
ani.replay()
## or export the animation to an HTML page
saveHTML(ani.replay(), img.name = "record_plot")
library(animation)
## make sure ImageMagick has been installed in your system
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
## if the above conversion was successful, the option 'convert' should not be
## NULL under Windows
ani.options("convert")
## like 'C:/Software/LyX/etc/ImageMagick/convert.exe'
saveGIF({
brownian.motion(pch = 21, cex = 5, col = "red", bg = "yellow")
}, movie.name = "brownian_motion.gif", interval = 0.1, nmax = 30, ani.width = 600,
ani.height = 600)
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
saveGIF({
for (i in 1:10) plot(runif(10), ylim = 0:1)
})
for (i in 5) i
for (i in 5) return(i)
for (i in 5) {i}
for (i in 1:5) {i}
x=1:5
for (i in 1:5) {x[i]}
for (i in 1:5) {return(x[i])}
for (i in 1:5) {eval(x[i])}
for (i in 1:5) {print(x[i])}
for (i in 1:5) {print(i)}
for (i in 5:1) {print(i)}
friends=c(a,b,c)
friends=c('a','b','c')
for (friend in friends) {print(friend)}
load("C:/Users/vkhatri/Desktop/Python/forecast_data.RData")
View(forecast.data)
230/8
lapply(1:4, function(xx){ Sys.sleep(10)}
lapply(1:4, function(xx){ Sys.sleep(10)})
lapply(1:4, function(xx){ rnorm(1)})
system.time(lapply(1:4, function(xx){ rnorm(100000)}))
system.time(lapply(1:4, function(xx){ rnorm(10000000)}))
system.time(lapply(1:4, function(xx){ rnorm(100000000)}))
install.packages("parallelsugar")
library(parallelsugar)
library(devtools)
install_github(nathanvan/parallelsugar)
install_github("nathanvan/parallelsugar")
library(parallelsugar)
system.time(mclapply(1:4, function(xx){rnorm(100000000)}))
system.time(lapply(1:4, function(xx){ rnorm(100000000)}))
rep(rnorm(1),3)
rep(rnorm(10),3)
install.packages("nycflights13")
devtools::install_github("jarad/ISDSWorkshop", build_vignettes=TRUE)
library(ISDSWorkshop)
workshop()
library(ISDSWorkshop)
workshop()
9284*1.0263/36
library(magrittr)
3  %>% rnorm()
rnorm(3)
library(nycflights13)
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
library(dplyr)
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
library(ISDSWorkshop)
workshop()
library(pryr)
typeof(function)
typeof(rnorm)
mtcars
mtcars
subset(mtcars,mpg)
x[]=3
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))
names(df) <- letters[1:6]
df
#>    a  b c   d   e f
#> 1  1  6 1   5 -99 1
#> 2 10  4 4 -99   9 3
#> 3  7  9 5   4   1 4
#> 4  2  9 3   8   6 8
#> 5  1 10 5   9   8 6
#> 6  6  2 1   3   8 5
fix_missing <- function(x) {
x[x == -99] <- NA
x
}
df[] <- lapply(df, fix_missing)
df
library(ISDSWorkshop)
workshop()
rep(3,rnorm(1))
replicate(3,rnorm(1))
replicate(3,3)
df
devtools::install_github( "hadley/bookdown")
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
tmp
installedpkgs
tmp
head(tmp)
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
missing
install.packages(missing)
missing
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
missing
install.packages(missing[1])
install.packages(missing[2:197])
245.85+149.60+190.59+111.92+178.82
245.85+149.60+190.59+111.92+178.82+180.58
85000*.0375
245.85+149.60+190.59+111.92+178.82+180.58
install.packages("bookdown")
library(devtools)
find_rtools()
library(devtools)
install_github("hadley/bookdown")
setwd("C:/Users/vkhatri/Desktop/Track 3")
library(shiny)
runExample("01_hello")
26*1400
install.packages("printr")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("shiny")
install.packages("devtools")
shiny::runApp('Nick's Basic App')
shiny::runApp('Nicks Basic App')
install.packages("ggvis")
library(shiny)
library(shiny)
